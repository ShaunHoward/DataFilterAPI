A ScalarLinearFilter is a ScalarFilter that filters input based on a linear equation
and previous inputs. The filter can be reset with a given value of type double.

    // The output boundary coefficient for the linear equation.
    int M

    // The input boundary coefficient for the linear equation.
    int N

    // The current iteration of the filter.
    int i

    // The sum of the input.
    double inputSum

    // The sum of the output.
    double outputSum

    // The output multiplier list.
    List<Double> a

    // The input multiplier list.
    List<Double> b

    // The previous input list.
    List<Double> x

    // The previous output list.
    List<Double> y

    /**
     * Constructs a scalar linear filter with boundary coefficients N and M
     * and lists of multipliers a and b for input and output consecutively.
     *
     * @param M - the output boundary coefficient
     * @param N - the input boundary coefficient
     * @param a - the multiplier list for output
     * @param b - the multiplier list for input
     */
    public ScalarLinearFilter(int M, int N, ArrayList<Double> a, ArrayList<Double> b){
        this.M <- M
        this.N <- N
        this.a <- a
        this.b <- b
        this.i <- 0
        this.inputSum <- 0
        this.outputSum <- 0
        x <- new array list initialized with M zeroes
        y <- new array list initialized with N zeroes
    }

    /**
     * Filters the input by calculating the output at
     * the current iteration given the linear equation
     * for the scalar linear filter.
     *
     * @param in - the input value to calculate the output in
     *           relation to
     * @return the output value y(i) of the linear equation solution
     */
    @Override
    public double filter(double in) {
        check that in is not null
        add in to x at index i
        double out <- call function sumInput - call function sumOutput
        add out to y at index i
        i <- i + 1
        return out
    }

    /**
     * Calculates the right (input) side of the linear equation.
     * Sum of b(n) * x(i-n), where n starts at 0 and ends at N
     * and i is the current iteration of filter input.
     *
     * @return the sum of the input side of the linear equation
     */
    private double sumInput() {
        check that b and x are not empty
        check that b has n elements

        double sum <- 0
        label IN_SUM_LOOP:
        for n <- 0 to N do
            //sum = sum + b(n) * x(i-n)
            if i - n >= 0
                sum <- sum + value of b at index n * value of x at index i - n
            else
                //will only add zeroes to sum, so break
                break from IN_SUM_LOOP

        return sum + inputSum
    }

    /**
     * Calculates the left (output) side of the linear equation without adding the
     * output, y(i), of the current iteration i.
     * Sum of a(m) * y(i-m), where m starts at 1 and ends at M.
     *
     * @return the left side of the linear equation without the output included
     */
    private double sumOutput() {
        check that a and y are not empty
        check that a has m elements

        double sum <- 0
        label OUT_SUM_LOOP:
        for m <- 1 to M do
            //sum = sum + a(m) * y(i-m)
            if i - m >= 0
                sum <- sum + value of a at index m * value of y at index i - m
            else
                //will only add zeroes to sum, so break
                break from OUT_SUM_LOOP

        return sum + outputSum
    }

    /**
     * Resets the filter with the given value r.
     * Sets the record of previous input value to r.
     * Sets the record of previous output value to
     * r(sum of b(0)-b(N)) / (1 + sum of a(1) - a(M)).
     *
     * @param r - the value to reset the filter with
     */
    @Override
    public void reset(double r) {
        double dividend <- 0
        double quotient <- 1
        for n <- 0 to N do
            dividend <- dividend + value of b at index n

        for n <- 1 to M do
            quotient <- quotient + value of a at index m

        i <- 0
        inputSum <- r
        dividend <- r * dividend
        outputSum <- dividend / quotient
    }

    /**
     * Gets the input boundary coefficient.
     *
     * @return the input boundary coefficient
     */
    public int getN() {
        return N
    }

    /**
     * Gets the list of input multipliers.
     *
     * @return the list of input multipliers
     */
    public List<Double> getB() {
        return b
    }

}